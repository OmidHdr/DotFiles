# Basic Settings
set hidden false
set ignorecase true
set icons true
set drawbox true
set previewer ~/.config/lf/preview
set preview true
set cleaner ~/.config/lf/cleaner
set ratios 1:2:3

# Custom Functions
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd mkfile $touch "$(echo $* | tr ' ' '\ ')"

cmd video ${{
  echo "1. Open with VLC"
  echo "2. Open with MPV"
  read -p "Enter your choice: " choice

  case $choice in
    1)
        vlc "$1" &
        ;;
    2)
        mpv "$1" &
        ;;
    *)
        echo "Invalid choice. Exiting."
        ;;
esac
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.tar.xz) tar -xJf "$f" ;;
      *.rar) unrar x "$f" ;;
      *) notify-send "Unsupported format"
  esac
}}

# Execute exe
cmd execute ${{
	wine "$f"
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd cp_root ${{
    f -save -echo $fx | while read file; do
        dest=$(lf -remote "send $id echo 'select destination file'"); # Prompt to select destination
        sudo cp -r "$file" "$dest"
    done
}}

cmd chmod ${{
  printf "Mode chmod: "
  read ans

  for file in "$fx"
  do
    sudo chmod $ans $file
  done

  lf -remote 'send reload'
}}


cmd chown ${{
  printf "Mode owner: "
  read ans

  for file in "$fx"
  do
    sudo chown $ans $file
  done

  lf -remote 'send reload'
}}


cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# ----- see the size of folder ------
cmd folder_size ${{
    folder_size=$(du -sh . | awk '{print $1}')
    lf -remote "send $id echo 'Size of current folder: $folder_size'"
}}

# --- Mount Phone ----
cmd mountPhone ${{
    python_output=$(python3 ~/.config/python/phoneMount.py)
    lf -remote "send $id echo 'Python Output: $python_output'"
}}


# Bindings Functions
map . set hidden!
map <c-t> restore_trash
map <c-q> :folder_size
map <c-r> :cp_root
map <c-h> set hidden!
map <c-d> delete
map p paste
map <c-x> cut
map <c-v> paste
map <c-c> copy
map <enter> open
map R reload
map <c-f> push :mkfile<space>
map <c-n> push :mkdir<space>
map bg setwallpaper
map C clear


# --- Movement ---
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gP cd ~/Public
map gc cd ~/.config
map gm cd /run/media/backup/Movie
map gl cd /run/media/backup/learn
map gb cd /run/media/backup
map gt cd ~/.local/share/Trash/files
map go cd /opt
map gr cd /

# create z menu
map zm chmod
map zo chown
map zk sudomkfile
map zu unarchive
map zw execute
map zp video
map zu unarchive
map zv video
map zp mountPhone

# --- Rename Files ---
map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename











